// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/service/bcrypt_service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BcryptService_HashPassword_FullMethodName = "/bcrypt_service.BcryptService/HashPassword"
)

// BcryptServiceClient is the client API for BcryptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BcryptServiceClient interface {
	HashPassword(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashResponse, error)
}

type bcryptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBcryptServiceClient(cc grpc.ClientConnInterface) BcryptServiceClient {
	return &bcryptServiceClient{cc}
}

func (c *bcryptServiceClient) HashPassword(ctx context.Context, in *HashRequest, opts ...grpc.CallOption) (*HashResponse, error) {
	out := new(HashResponse)
	err := c.cc.Invoke(ctx, BcryptService_HashPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BcryptServiceServer is the server API for BcryptService service.
// All implementations must embed UnimplementedBcryptServiceServer
// for forward compatibility
type BcryptServiceServer interface {
	HashPassword(context.Context, *HashRequest) (*HashResponse, error)
	mustEmbedUnimplementedBcryptServiceServer()
}

// UnimplementedBcryptServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBcryptServiceServer struct {
}

func (UnimplementedBcryptServiceServer) HashPassword(context.Context, *HashRequest) (*HashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HashPassword not implemented")
}
func (UnimplementedBcryptServiceServer) mustEmbedUnimplementedBcryptServiceServer() {}

// UnsafeBcryptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BcryptServiceServer will
// result in compilation errors.
type UnsafeBcryptServiceServer interface {
	mustEmbedUnimplementedBcryptServiceServer()
}

func RegisterBcryptServiceServer(s grpc.ServiceRegistrar, srv BcryptServiceServer) {
	s.RegisterService(&BcryptService_ServiceDesc, srv)
}

func _BcryptService_HashPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcryptServiceServer).HashPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BcryptService_HashPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcryptServiceServer).HashPassword(ctx, req.(*HashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BcryptService_ServiceDesc is the grpc.ServiceDesc for BcryptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BcryptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bcrypt_service.BcryptService",
	HandlerType: (*BcryptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HashPassword",
			Handler:    _BcryptService_HashPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/service/bcrypt_service.proto",
}
